/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define LOWER  1
#define RAISE  2
#define ADJUST 3

/* Uncomment this block if using RGB
&led_strip {
       // chain-length = <6>;
       // chain-length = <38>; // Uncomment if using both per-key and underglow LEDs
       // chain-length = <32>; // Uncomment if using only per-key LEDs.
};
*/

/* NOTE: At the time of the creation of this keymap, there are no specified codes for 'eisuu' and 'kana' input in ZMK.
However, 'LANG1' and 'LANG2' are fully-functioning candidates for 'kana' and 'eisuu' input respectively.
As such, those are in use within the default layer at this time.*/
&soft_off {
  hold-time-ms = <3000>;
};

/ {
  keymap {
    compatible = "zmk,keymap";

    default_layer {
           // ---------------------------------------------------------------------------------------------------------------------------------
           // | GRAVE  |   1    |   2    |   3    |   4    |   5    |                                      |   6    |   7    |   8    |   9    |   0    |  DEL   |
           // |  TAB   |   Q    |   W    |   E    |   R    |   T    |                                      |   Y    |   U    |   I    |   O    |   P    |  BSPC  |
           // |  CTRL  |   A    |   S    |   D    |   F    |   G    |                                      |   H    |   J    |   K    |   L    |   ;    |   '    |
           // |  SHIFT |   Z    |   X    |   C    |   V    |   B    |  LBKT  |                    |  RBKT  |   N    |   M    |   ,    |   .    |   /    |  RET   |
           // | ADJUST |  ESC   |  ALT   |  LGUI  | EISUU  | LOWER  | SPACE  |                    |  SPACE | RAISE  |  KANA  |  LEFT  |  DOWN  |  UP    |  RIGHT |
           bindings = <
           &none       &kp F1      &kp F2      &kp F3      &kp F4      &kp F5                                 &kp F6    &kp F7    &kp F8     &kp F9     &kp F10   &soft_off
           &kp TAB     &kp Q       &kp W       &kp E       &kp R       &kp T                                  &kp Y     &kp U     &kp I      &kp O      &kp P     &kp LBKT
           &kp LCTRL   &kp A       &kp S       &kp D       &kp F       &kp G                                  &kp H     &kp J     &kp K      &kp L      &kp SEMI  &kp SQT
           &none       &kp Z       &kp X       &kp C       &kp V       &kp B       &none            &none     &kp N     &kp M     &kp COMMA  &kp PERIOD &kp SLASH &kp NUHS
           &kp LSHIFT  &none       &none       &mo ADJUST  &mo LOWER   &kp SPACE   &none            &none     &kp SPACE &mo RAISE &mo ADJUST &none      &none     &kp RSHIFT
           >;
    };

    lower_layer {
           // ---------------------------------------------------------------------------------------------------------------------------------
           // |      |      |      |      |      |      |                                  |      |      |      |      |      |      |
           // |  ~   |  !   |  @   |  #   |  $   |  %   |                                  |  ^   |  &   |  *   |  (   |  )   |      |
           // |      |      |      |      |      |      |                                  |      |  _   |  +   |  {   |  }   | PIPE |
           // |      |      |      |      |      |      |  (   |                    |  )   |      |      |      | HOME | END  |      |
           // |      |      |      |      |      |      |      |                    |      |      |      |      |      |      |      |
           bindings = <
           &none    &kp F1   &kp F2   &kp F3   &kp F4     &kp F5                             &kp F6     &kp F7     &kp F8      &kp F9     &kp F10    &none
           &none    &kp N1   &kp N2   &kp N3   &kp N4     &kp N5                             &kp N6     &kp N7     &kp N8      &kp N9     &kp N0     &kp MINUS
           &none    &none   &kp LEFT &kp UP   &kp DOWN   &kp RIGHT                          &kp LS(N6) &kp LS(N7) &kp LS(N8)  &kp LS(N9) &kp LS(N0) &kp LS(MINUS)
           &none    &none   &none   &kp PGUP &kp PGDN   &none    &none           &none    &kp LA(N6) &kp LA(N7) &kp LA(N8)  &kp LA(N9) &kp LA(N0) &none
           &none    &none   &none   &none   &none     &none    &none          &none   &none     &none     &none      &none     &none     &none
           >;
    };

    raise_layer {
           // ---------------------------------------------------------------------------------------------------------------------------------
           // |       |       |       |       |       |       |                                    |       |       |       |       |       |       |
           // |   `   |   1   |   2   |   3   |   4   |   5   |                                    |   6   |   7   |   8   |   9   |   0   |  DEL  |
           // |       |  F1   |  F2   |  F3   |  F4   |  F5   |                                    |  F6   |   -   |   =   |   [   |   ]   |   \   |
           // |       |  F7   |  F8   |  F9   |  F10  |  F11  |       |                    |       |  F12  |       | PSCRN | PG_DN | PG_UP |       |
           // |       |       |       |       |       |       |       |                    |       |       |       | NEXT  | VOL-  | VOL+  | PLAY  |
           bindings = <
           &none    &kp F1   &kp F2   &kp F3   &kp F4     &kp F5                             &kp F6     &kp F7     &kp F8      &kp F9     &kp F10    &none
           &kp GRAVE &kp N1 &kp N2 &kp N3 &kp N4  &kp N5                       &kp N6  &kp N7    &kp N8     &kp N9       &kp N0       &kp DEL
           &none    &kp LS(N1) &kp LS(N2) &kp LS(N3) &kp LS(N4)  &kp LS(N5)                       &kp LEFT  &kp DOWN &kp UP  &kp RIGHT     &none     &none
           &none    &kp LA(N1) &kp LA(N2) &kp LA(N3) &kp LA(N4) &kp LA(N5) &none        &none &kp F12 &none    &kp PSCRN  &kp PG_DN    &kp PG_UP    &none
           &kp LBRC    &none &none &none &none  &none  &none        &none &none  &none    &kp C_NEXT &kp C_VOL_DN &kp C_VOL_UP &kp C_PP
           >;
    };
    
    adjust_layer {
           // ---------------------------------------------------------------------------------------------------------------------------------
           // |    `     |    !     |    @     |    #     |    $     |    %     |                                          |    ^     |    &     |    *     |    (     |    )     |  EP TOG  |
           // |  BT CLR  | BT SEL0  | BT SEL1  | BT SEL2  | BGT SEL3 | BT SEL4  |                                          | RGB EFF+ | RGB HUE+ | RGB SAT+ | RGB SPD+ | RGB BRI+ | RGB TOG  |
           // |  BT NXT  | OUT TOG  | OUT USB  | OUT BLE  |          |          |                                          | RGB EFF- | RGB HUE- | RGB SAT- | RGB SPD- | RGB BRI- |          |
           // |  BT PRV  |          |          |          |          |          |    {     |                    |    }     |          |          |          |          |          |          |
           // |          |          |          |          |          |          |          |                    |          |          |          |          |          |          |          |
           bindings = <
           &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                          &kp CARET       &kp AMPS        &kp ASTRK       &kp LPAR        &kp RPAR        &ext_power EP_TOG
           &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                          &rgb_ug RGB_EFF &rgb_ug RGB_HUI &rgb_ug RGB_SAI &rgb_ug RGB_SPI &rgb_ug RGB_BRI &rgb_ug RGB_TOG
           &bt BT_NXT &out OUT_TOG &out OUT_USB &out OUT_BLE &none       &none                                &rgb_ug RGB_EFR &rgb_ug RGB_HUD &rgb_ug RGB_SAD &rgb_ug RGB_SPD &rgb_ug RGB_BRD &none
           &bt BT_PRV &none       &none       &none       &none       &none       &kp LBRC        &kp RBRC &none          &none          &none          &none          &none          &none
           &none     &none       &none       &none       &none       &none       &none          &none   &none          &none          &none          &none          &none          &none
           >;
    };
  };
};

/ {
  combos {
    compatible = "zmk,combos";
    combo_esc {
      timeout-ms = <50>;
      key-positions = <26 27 28>;
      bindings = <&kp ESC>;
    };

    combo_ret {
      timeout-ms = <50>;
      key-positions = <31 32>;
      bindings = <&kp RET>;
    };

    combo_tab {
      timeout-ms = <50>;
      key-positions = <27 28>;
      bindings = <&kp TAB>;
    };

    combo_bspc {
      timeout-ms = <50>;
      key-positions = <26 27>;
      bindings = <&kp BSPC>;
    };

    combo_lctrl {
      timeout-ms = <50>;
      key-positions = <14 26>;
      bindings = <&kp LCTRL>;
    };

    combo_rctrl {
      timeout-ms = <50>;
      key-positions = <21 33>;
      bindings = <&kp RCTRL>;
    };

    combo_lalt {
      timeout-ms = <50>;
      key-positions = <15 27>;
      bindings = <&kp LALT>;
    };

    combo_ralt {
      timeout-ms = <50>;
      key-positions = <20 32>;
      bindings = <&kp RALT>;
    };

    combo_lgui {
      timeout-ms = <50>;
      key-positions = <16 28>;
      bindings = <&kp LGUI>;
    };

    combo_rgui {
      timeout-ms = <50>;
      key-positions = <19 31>;
      bindings = <&kp RGUI>;
    };

    combo_lparen {
      timeout-ms = <50>;
      key-positions = <15 16>;
      bindings = <&kp LS(N8)>;
    };

    combo_rparen {
      timeout-ms = <50>;
      key-positions = <19 20>;
      bindings = <&kp LS(N9)>;
    };

    combo_lbracket {
      timeout-ms = <50>;
      key-positions = <14 15>;
      bindings = <&kp LA(N8)>;
    };

    combo_rbracket {
      timeout-ms = <50>;
      key-positions = <20 21>;
      bindings = <&kp LA(N9)>;
    };

    combo_lbrace {
      timeout-ms = <50>;
      key-positions = <14 15 16>;
      bindings = <&kp LS(LA(N8))>;
    };

    combo_rbrace {
      timeout-ms = <50>;
      key-positions = <19 20 21>;
      bindings = <&kp LS(LA(N9))>;
    };

    combo_less {
      timeout-ms = <50>;
      key-positions = <14 16>;
      bindings = <&kp GRAVE>;
    };

    combo_greater {
      timeout-ms = <50>;
      key-positions = <19 21>;
      bindings = <&kp LS(GRAVE)>;
    };

    combo_swap {
      timeout-ms = <50>;
      key-positions = <20 21 32 33>;
      bindings = <&kp LG(TAB)>;
    };

    combo_circ {
      timeout-ms = <50>;
      key-positions = <40 41>;
      bindings = <&kp LS(RBKT)>;
    };

    combo_tild {
      timeout-ms = <50>;
      key-positions = <44 45>;
      bindings = <&kp LA(RBKT)>;
    };

    combo_semicolon {
      timeout-ms = <50>;
      key-positions = <32 46>;
      bindings = <&kp LS(COMMA)>;
    };

    combo_colon {
      timeout-ms = <50>;
      key-positions = <33 47>;
      bindings = <&kp LS(PERIOD)>;
    };

    combo_equal {
      timeout-ms = <200>;
      key-positions = <28 29 30 31>;
      bindings = <&m_equal>;
    };

    combo_equality {
      timeout-ms = <50>;
      key-positions = <29 30>;
      bindings = <&m_equality>;
    };

    combo_nonequality {
      timeout-ms = <50>;
      key-positions = <28 31>;
      bindings = <&m_nonequality>;
    };

    combo_final {
      timeout-ms = <200>;
      key-positions = <28 20 44>;
      bindings = <&m_final>;
    };

    combo_return {
      timeout-ms = <200>;
      key-positions = <16 17 44>;
      bindings = <&m_return>;
    };

    combo_required {
      timeout-ms = <200>;
      key-positions = <13 16 20>;
      bindings = <&m_required>;
    };
  };
};

/ {
    macros {
      ZMK_MACRO(m_equal,
          wait-ms = <30>;
          tap-ms = <40>;
          bindings = <&kp LS(N0) &kp SPACE>;
      )

      ZMK_MACRO(m_equality,
          wait-ms = <30>;
          tap-ms = <40>;
          bindings = <&kp LS(N0) &kp LS(N0) &kp SPACE>;
      )

      ZMK_MACRO(m_nonequality,
          wait-ms = <30>;
          tap-ms = <40>;
          bindings = <&kp LS(N1) &kp LS(N0) &kp SPACE>;
      )

      ZMK_MACRO(m_final,
          wait-ms = <30>;
          tap-ms = <40>;
          bindings = <&kp F &kp I &kp N &kp A &kp L &kp SPACE>;
      )

      ZMK_MACRO(m_return,
          wait-ms = <30>;
          tap-ms = <40>;
          bindings = <&kp R &kp E &kp T &kp U &kp R &kp N &kp SPACE>;
      )

      ZMK_MACRO(m_required,
          wait-ms = <30>;
          tap-ms = <40>;
          bindings = <&kp R &kp E &kp Q &kp U &kp I &kp R &kp E &kp D &kp SPACE>;
      )
    };
};
