/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define LOWER  1
#define RAISE  2
#define ADJUST 3

//* Uncomment this block if using RGB
&led_strip {
       // chain-length = <6>;
       // chain-length = <38>; // Uncomment if using both per-key and underglow LEDs
       chain-length = <32>; // Uncomment if using only per-key LEDs.
};
//*/

/* NOTE: At the time of the creation of this keymap, there are no specified codes for 'eisuu' and 'kana' input in ZMK.
However, 'LANG1' and 'LANG2' are fully-functioning candidates for 'kana' and 'eisuu' input respectively.
As such, those are in use within the default layer at this time.*/
&soft_off {
  hold-time-ms = <3000>;
};

/ {
  keymap {
    compatible = "zmk,keymap";

    default_layer {
    // -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // |               |   F1          |   F2          |   F3          |   F4          |   F5          |                           |   F6          |   F7          |   F8          |   F9          |  F10          |  SOFT_OFF     |
    // |               |   Q           |   W           |   E           |   R           |   T           |                           |   Y           |   U           |   I           |   O           |   P           |   Å           |
    // |               |   A           |   S           |   D           |   F           |   G           |                           |   H           |   J           |   K           |   L           |   Ö           |   Ä           |
    // |               |   Z           |   X           |   C           |   V           |   B           |               |           |   N           |   M           |   ,           |   .           |   -           |   '           |
    // | LSHIFT        |               |               | ADJUST        | LOWER         | SPACE         |               |           | SPACE         |  RAISE        |  ADJUST       |               |               |  RSHIFT       |
    // -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      bindings = <    
        &none           &kp F1          &kp F2          &kp F3          &kp F4          &kp F5                                      &kp F6          &kp F7          &kp F8          &kp F9          &kp F10         &soft_off
        &none           &kp Q           &kp W           &kp E           &kp R           &kp T                                       &kp Y           &kp U           &kp I           &kp O           &kp P           &kp LBKT
        &none           &kp A           &kp S           &kp D           &kp F           &kp G                                       &kp H           &kp J           &kp K           &kp L           &kp SEMI        &kp SQT
        &none           &kp Z           &kp X           &kp C           &kp V           &kp B           &none           &none       &kp N           &kp M           &kp COMMA       &kp PERIOD      &kp SLASH       &kp NUHS
        &kp LSHIFT      &none           &none           &mo ADJUST      &mo LOWER       &kp SPACE       &none           &none       &kp SPACE       &mo RAISE       &mo ADJUST      &none           &none           &kp RSHIFT
      >;
    };

    lower_layer {
    // -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // |               |   F1          |   F2          |   F3          |   F4          |   F5          |                           |   F6          |   F7          |   F8          |   F9          |  F10          |  SOFT_OFF     |
    // |               |   Q           |   W           |   E           |   R           |   T           |                           |   Y           |   U           |   I           |   O           |   P           |   Å           |
    // |               |   A           |   S           |   D           |   F           |   G           |                           |   H           |   J           |   K           |   L           |   Ö           |   Ä           |
    // |               |   Z           |   X           |   C           |   V           |   B           |               |           |   N           |   M           |   ,           |   .           |   -           |   '           |
    // | LSHIFT        |               |               | ADJUST        | LOWER         | SPACE         |               |           | SPACE         |  RAISE        |  ADJUST       |               |               |  RSHIFT       |
    // -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      bindings = <
        &none           &kp F1          &kp F2          &kp F3          &kp F4          &kp F5                                      &kp F6          &kp F7          &kp F8          &kp F9          &kp F10         &none
        &none           &kp N1          &kp N2          &kp N3          &kp N4          &kp N5                                      &kp N6          &kp N7          &kp N8          &kp N9          &kp N0          &kp MINUS
        &none           &none           &kp LEFT        &kp UP          &kp DOWN        &kp RIGHT                                   &kp LS(N6)      &kp LS(N7)      &kp LS(N8)      &kp LS(N9)      &kp LS(N0)      &kp LS(MINUS)
        &none           &none           &none           &kp PGUP        &kp PGDN        &none           &none           &none       &kp LA(N6)      &kp LA(N7)      &kp LA(N8)      &kp LA(N9)      &kp LA(N0)      &kp LS(NUHS)
        &none           &none           &none           &none           &none           &none           &none           &none       &none           &none           &none           &none           &none           &none
      >;
    };

    raise_layer {
    // -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // |               |   F1          |   F2          |   F3          |   F4          |   F5          |                           |   F6          |   F7          |   F8          |   F9          |  F10          |  SOFT_OFF     |
    // |               |   Q           |   W           |   E           |   R           |   T           |                           |   Y           |   U           |   I           |   O           |   P           |   Å           |
    // |               |   A           |   S           |   D           |   F           |   G           |                           |   H           |   J           |   K           |   L           |   Ö           |   Ä           |
    // |               |   Z           |   X           |   C           |   V           |   B           |               |           |   N           |   M           |   ,           |   .           |   -           |   '           |
    // | LSHIFT        |               |               | ADJUST        | LOWER         | SPACE         |               |           | SPACE         |  RAISE        |  ADJUST       |               |               |  RSHIFT       |
      bindings = <
        &none           &kp F1          &kp F2          &kp F3          &kp F4          &kp F5                                      &kp F6          &kp F7          &kp F8          &kp F9          &kp F10         &none
        &none           &kp N1          &kp N2          &kp N3          &kp N4          &kp N5                                      &kp N6          &kp N7          &kp N8          &kp N9          &kp N0          &none
        &none           &kp LS(N1)      &kp LS(N2)      &kp LS(N3)      &kp LS(N4)      &kp LS(N5)                                  &kp LEFT        &kp DOWN        &kp UP          &kp RIGHT       &none           &none
        &none           &kp LA(N1)      &kp LA(N2)      &kp LA(N3)      &kp LA(N4)      &kp LA(N5)      &none           &none       &kp F12         &none           &kp PSCRN       &kp PG_DN       &kp PG_UP       &none
        &none           &none           &none           &none           &none           &none           &none           &none       &none           &none           &none           &none           &none           &none
      >;
    };
    
    adjust_layer {
    // -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // |               |   F1          |   F2          |   F3          |   F4          |   F5          |                           |   F6          |   F7          |   F8          |   F9          |  F10          |  SOFT_OFF     |
    // |               |   Q           |   W           |   E           |   R           |   T           |                           |   Y           |   U           |   I           |   O           |   P           |   Å           |
    // |               |   A           |   S           |   D           |   F           |   G           |                           |   H           |   J           |   K           |   L           |   Ö           |   Ä           |
    // |               |   Z           |   X           |   C           |   V           |   B           |               |           |   N           |   M           |   ,           |   .           |   -           |   '           |
    // | LSHIFT        |               |               | ADJUST        | LOWER         | SPACE         |               |           | SPACE         |  RAISE        |  ADJUST       |               |               |  RSHIFT       |
      bindings = <
        &bt BT_CLR      &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4                                &none           &none           &none           &none           &none           &ext_power EP_TOG
        &none           &none           &none           &none           &none           &none                                       &none           &none           &none           &none           &none           &rgb_ug RGB_TOG
        &none           &none           &none           &none           &none           &none                                       &none           &none           &none           &none           &none           &none
        &none           &none           &none           &none           &none           &none           &none           &none       &none           &none           &none           &none           &none           &none
        &none           &none           &none           &none           &none           &none           &none           &none       &none           &none           &none           &none           &none           &none
      >;
    };
  };
};

/ {
    combos {
      compatible = "zmk,combos";
      c_esc {
        timeout-ms = <30>;
        key-positions = <26 27 28>;
        bindings = <&kp ESC>;
      };

      c_ret {
        timeout-ms = <30>;
        key-positions = <31 32>;
        bindings = <&kp RET>;
      };

      c_tab {
        timeout-ms = <30>;
        key-positions = <27 28>;
        bindings = <&kp TAB>;
      };

      c_bspc {
        timeout-ms = <30>;
        key-positions = <26 27>;
        bindings = <&kp BSPC>;
      };

      //
      // Modifiers
      //

      c_lctrl {
        timeout-ms = <30>;
        key-positions = <14 26>;
        bindings = <&kp LCTRL>;
      };

      c_rctrl {
        timeout-ms = <30>;
        key-positions = <21 33>;
        bindings = <&kp RCTRL>;
      };

      c_lalt {
        timeout-ms = <30>;
        key-positions = <15 27>;
        bindings = <&kp LALT>;
      };

      c_ralt {
        timeout-ms = <30>;
        key-positions = <20 32>;
        bindings = <&kp RALT>;
      };

      c_lgui {
        timeout-ms = <30>;
        key-positions = <16 28>;
        bindings = <&kp LGUI>;
      };

      c_rgui {
        timeout-ms = <30>;
        key-positions = <19 31>;
        bindings = <&kp RGUI>;
      };

      //
      // Brackets
      //

      c_lparen {
        timeout-ms = <30>;
        key-positions = <15 16>;
        bindings = <&kp LS(N8)>;
      };

      c_rparen {
        timeout-ms = <30>;
        key-positions = <19 20>;
        bindings = <&kp LS(N9)>;
      };

      c_lbracket {
        timeout-ms = <30>;
        key-positions = <14 15>;
        bindings = <&kp LA(N8)>;
      };

      c_rbracket {
        timeout-ms = <30>;
        key-positions = <20 21>;
        bindings = <&kp LA(N9)>;
      };

      c_lbrace {
        timeout-ms = <30>;
        key-positions = <14 15 16>;
        bindings = <&kp LS(LA(N8))>;
      };

      c_rbrace {
        timeout-ms = <30>;
        key-positions = <19 20 21>;
        bindings = <&kp LS(LA(N9))>;
      };

      c_less {
        timeout-ms = <30>;
        key-positions = <14 16>;
        bindings = <&kp GRAVE>;
      };

      c_greater {
        timeout-ms = <30>;
        key-positions = <19 21>;
        bindings = <&kp LS(GRAVE)>;
      };

      c_circ {
        timeout-ms = <30>;
        key-positions = <40 41>;
        bindings = <&m_circ>;
      };

      c_tild {
        timeout-ms = <30>;
        key-positions = <44 45>;
        bindings = <&m_tild>;
      };

      c_semicolon {
        timeout-ms = <30>;
        key-positions = <32 46>;
        bindings = <&kp LS(COMMA)>;
      };

      c_colon {
        timeout-ms = <30>;
        key-positions = <33 47>;
        bindings = <&kp LS(PERIOD)>;
      };

      c_singlequote {
        timeout-ms = <30>;
        key-positions = <13 25>;
        bindings = <&kp NUHS>;
      };

      c_doublequote {
        timeout-ms = <30>;
        key-positions = <22 34>;
        bindings = <&kp LS(N2)>;
      };

      // BORK
      c_equal {
        timeout-ms = <30>;
        key-positions = <41 44>; // B+N
        bindings = <&m_equal>;
      };

      c_equality {
        timeout-ms = <30>;
        key-positions = <29 30>;
        bindings = <&m_equality>;
      };

      c_nonequality {
        timeout-ms = <30>;
        key-positions = <28 31>;
        bindings = <&m_nonequality>;
      };

      c_swap {
        timeout-ms = <30>;
        key-positions = <20 21 32 33>;
        bindings = <&kp LG(TAB)>;
      };

      // BORK
      c_final {
        timeout-ms = <30>;
        key-positions = <28 20 44>;
        bindings = <&m_final>;
      };

      // BORK
      c_return {
        timeout-ms = <30>;
        key-positions = <16 17 44>;
        bindings = <&m_return>;
      };

      // BORK
      c_required {
        timeout-ms = <30>;
        key-positions = <13 16 20>;
        bindings = <&m_required>;
      };
    };
};

/ {
    macros {
      ZMK_MACRO(m_circ,
          wait-ms = <30>;
          tap-ms = <40>;
          bindings = <&kp LS(RBKT) &kp SPACE>;
      )

      ZMK_MACRO(m_tild,
          wait-ms = <30>;
          tap-ms = <40>;
          bindings = <&kp LA(RBKT) &kp SPACE>;
      )

      ZMK_MACRO(m_equal,
          wait-ms = <30>;
          tap-ms = <40>;
          bindings = <&kp LS(N0) &kp SPACE>;
      )

      ZMK_MACRO(m_equality,
          wait-ms = <30>;
          tap-ms = <40>;
          bindings = <&kp LS(N0) &kp LS(N0) &kp SPACE>;
      )

      ZMK_MACRO(m_nonequality,
          wait-ms = <30>;
          tap-ms = <40>;
          bindings = <&kp LS(N1) &kp LS(N0) &kp SPACE>;
      )

      ZMK_MACRO(m_final,
          wait-ms = <30>;
          tap-ms = <40>;
          bindings = <&kp F &kp I &kp N &kp A &kp L &kp SPACE>;
      )

      ZMK_MACRO(m_return,
          wait-ms = <30>;
          tap-ms = <40>;
          bindings = <&kp R &kp E &kp T &kp U &kp R &kp N &kp SPACE>;
      )

      ZMK_MACRO(m_required,
          wait-ms = <30>;
          tap-ms = <40>;
          bindings = <&kp R &kp E &kp Q &kp U &kp I &kp R &kp E &kp D &kp SPACE>;
      )
    };
};
